pipeline {
    agent any

    environment {
        AZURE_CLIENT_ID       = credentials('azure-client-id')
        AZURE_CLIENT_SECRET   = credentials('azure-client-secret')
        AZURE_TENANT_ID       = credentials('azure-tenant-id')
        AZURE_SUBSCRIPTION_ID = credentials('azure-subscription-id')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE          = 'saif1920/nodejs-shopping-cart-web-app:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/SaifeddineBENZAIED/TP_K8s_devops.git'
            }
        }

        stage('Terraform Init') {
            steps {
                sh '''
                docker exec terraform terraform init
                '''
            }
        }

        stage('Terraform Plan') {
            steps {
                sh '''
                docker exec terraform terraform plan \
                    -var "client_id=$AZURE_CLIENT_ID" \
                    -var "client_secret=$AZURE_CLIENT_SECRET" \
                    -var "tenant_id=$AZURE_TENANT_ID" \
                    -var "subscription_id=$AZURE_SUBSCRIPTION_ID"
                '''
            }
        }

        stage('Terraform Apply') {
            steps {
                sh '''
                docker exec terraform terraform apply -auto-approve \
                    -var "client_id=$AZURE_CLIENT_ID" \
                    -var "client_secret=$AZURE_CLIENT_SECRET" \
                    -var "tenant_id=$AZURE_TENANT_ID" \
                    -var "subscription_id=$AZURE_SUBSCRIPTION_ID"
                '''
            }
        }

        stage('Deploy Docker Image') {
            steps {
                withDockerRegistry([credentialsId: 'dockerhub-credentials', url: 'https://registry.hub.docker.com']) {
                    sh '''
                    az login --service-principal \
                             --username $AZURE_CLIENT_ID \
                             --password $AZURE_CLIENT_SECRET \
                             --tenant $AZURE_TENANT_ID

                    az webapp config container set \
                        --name jenkins-tp-app \
                        --resource-group jenkins_tp_rg \
                        --docker-custom-image-name $DOCKER_IMAGE \
                        --docker-registry-server-url https://index.docker.io \
                        --docker-registry-server-user $DOCKERHUB_CREDENTIALS_USR \
                        --docker-registry-server-password $DOCKERHUB_CREDENTIALS_PSW
                    '''
                }
            }
        }

        stage('Start Prometheus Container') {
            steps {
                script {
                    // Check if Prometheus container is already running
                    def isPrometheusRunning = sh(script: "docker ps --filter 'name=prometheus' --format '{{.Names}}' | grep prometheus || true", returnStdout: true).trim()
                    if (isPrometheusRunning) {
                        echo "Prometheus is already running."
                    } else {
                        // Ensure the Prometheus configuration file exists
                        sh '''
                        mkdir -p /tmp/prometheus
                        cp prometheus.yml /tmp/prometheus/prometheus.yml
                        '''
                        echo "Starting Prometheus container..."
                        sh '''
                        docker run -d \
                            --name prometheus \
                            -p 9090:9090 \
                            -v /tmp/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \
                            prom/prometheus
                        '''
                    }
                }
            }
        }

        stage('Monitoring Check') {
            steps {
                script {
                    def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://prometheus:9090/metrics", returnStdout: true).trim()
                    if (response != '200') {
                        error("Monitoring setup failed. Prometheus is not accessible.")
                    } else {
                        echo "Prometheus is running and monitoring the application."
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Application deployed successfully with Prometheus monitoring enabled!"
        }
        failure {
            echo "Pipeline failed! Check logs for details."
        }
    }
}
